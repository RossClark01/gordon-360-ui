import { DateTime } from 'luxon';
import http from './http';

/**
 * Missing item report object, representing the model of a report for communication with the
 * backend service.
 */
export type MissingItemReport = {
  recordID?: number;
  firstName: string;
  lastName: string;
  category: string;
  colors: string[]; // Updated to an array of strings
  brand?: string;
  description: string;
  locationLost: string;
  stolen: boolean;
  stolenDescription?: string;
  dateLost: string;
  dateCreated: string;
  phoneNumber: string;
  altPhone?: string;
  emailAddr: string;
  status: string;
  adminUsername?: string;
};

/**
 * Fetch an array containing the full list of all missing item reports
 * @returns MissingItemReport[] array of all missing item reports
 */
const getMissingItemReports = async (): Promise<MissingItemReport[]> => {
  const response = await http.get<MissingItemReport[]>('lostandfound/missingitems');
  return response;
};

/**
 * Fetch a single missing item report given in id
 * @param id the id of the missing item report to fetch
 * @returns MissingItemReport a single missing item report matching the id.
 */
const getMissingItemReport = async (id: number): Promise<MissingItemReport> => {
  const response = await http.get<MissingItemReport>(`lostandfound/missingitemsbyid/${id}`);
  return response;
};

/**
 * Create a new missing item report, assigning it a unique id
 * @param data MissingItemReport object without a recordID, representing the report to be created
 * @returns the unique id generated by the backend service for the report
 */
const createMissingItemReport = async (
  data: Omit<MissingItemReport, 'recordID'>,
): Promise<number> => {
  // Convert dates to ISO string format and make sure colors is an array
  const formattedData = {
    ...data,
    dateLost: data.dateLost,
    dateCreated: DateTime.now().toISO(),
    colors: data.colors || [], // Ensure colors is an array
  };
  const response = await http.post<number>('/LostAndFound/missingitem', formattedData);
  return response;
};

const updateReportStatus = async (id: number, status: string): Promise<void> => {
  await http.put<void>(`lostandfound/missingitem/${id}/${status}`);
};

const lostAndFoundService = {
  getMissingItemReports,
  createMissingItemReport,
  getMissingItemReport,
  updateReportStatus,
};

export default lostAndFoundService;
